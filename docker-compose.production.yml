version: '3.8'

services:
  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: fastenmind_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - fastenmind_network

  # Database (不對外暴露端口)
  postgres:
    image: postgres:15-alpine
    container_name: fastenmind_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
      - ./database/init:/docker-entrypoint-initdb.d
      - ./backups:/backups  # 備份目錄
    # 移除 ports 映射，僅內部網路存取
    networks:
      - fastenmind_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (不對外暴露端口)
  redis:
    image: redis:7-alpine
    container_name: fastenmind_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - fastenmind_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: fastenmind_backend
    restart: unless-stopped
    # 移除直接端口映射，透過 nginx 存取
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - APP_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - LOG_LEVEL=info
    volumes:
      - ./backend/uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - fastenmind_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: fastenmind_frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL}
    networks:
      - fastenmind_network

  # 資料庫備份服務
  db-backup:
    image: postgres:15-alpine
    container_name: fastenmind_backup
    restart: "no"
    depends_on:
      - postgres
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
    networks:
      - fastenmind_network
    command: |
      sh -c "
      while true; do
        pg_dump -h postgres -U ${DB_USER} -d ${DB_NAME} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        find /backups -name '*.sql' -mtime +7 -delete
        sleep 86400
      done
      "

  # 監控 (可選)
  prometheus:
    image: prom/prometheus:latest
    container_name: fastenmind_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - fastenmind_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:

networks:
  fastenmind_network:
    driver: bridge